{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./inventory.service\";\nimport * as i2 from \"@angular/material/snack-bar\";\nexport let CartService = /*#__PURE__*/(() => {\n  class CartService {\n    constructor(inventoryService, _snackbar) {\n      this.inventoryService = inventoryService;\n      this._snackbar = _snackbar;\n      this.cartItems = [];\n      this.cartTotal = 0;\n      this.cartItemsCount$ = new BehaviorSubject(0);\n      this.cartQty$ = this.cartItemsCount$.asObservable();\n      this.orderDetails = {};\n      this.inventoryService.populatedList$.subscribe(response => {\n        // console.log(response);\n        this.products = response;\n      });\n    }\n\n    addToCart(product) {\n      //Condition to increase product cart quantity instead of removing element from cart array\n      if (this.cartItems.find(p => p.id == product.id) && this.products.find(i => i.stock > 0)) {\n        let index = this.products.indexOf(product);\n        this.products[index].stock--;\n        this.cartItems.find(product => product.qty++);\n        this.cartTotal = this.getCartTotal();\n      } else {\n        if (this.products.find(i => i.stock > 0 && i.id == product.id)) {\n          let index = this.products.indexOf(product);\n          this.products[index].stock--;\n          this.products[index].qty++;\n          this.cartItems.push(product);\n          this.cartTotal = this.getCartTotal();\n        }\n      }\n\n      this.getCartTotalQty(); // window.alert('product added');\n\n      this._snackbar.open(`Added ${product.name} to cart`, 'x', {\n        duration: 2500\n      });\n\n      console.log(this.products);\n      console.log(this.cartItems);\n    }\n\n    removeOneFromCart(product) {\n      //Condition to decrease product cart quantity instead of removing element from cart array\n      if (this.cartItems.find(p => p.id == product.id)) {\n        let index = this.products.indexOf(product);\n        this.products[index].stock++;\n        this.cartItems.find(product => product.qty--);\n        this.cartTotal = this.getCartTotal();\n      } else {\n        if (this.products.find(i => i.stock > 0 && i.id == product.id)) {\n          let index = this.products.indexOf(product);\n          this.products[index].stock++;\n          this.products[index].qty--;\n          this.cartItems.push(product);\n          this.cartTotal = this.getCartTotal();\n        }\n      }\n\n      this.getCartTotalQty(); // window.alert('product removed');\n\n      this._snackbar.open(`Removed ${product.name} to cart`, 'x', {\n        duration: 2500\n      });\n\n      console.log(this.products);\n      console.log(this.cartItems);\n    }\n\n    deleteFromCart(product) {\n      //Remove item from cart array\n      let index = this.cartItems.indexOf(product);\n      this.cartItems.splice(index, 1); //return inventory stock\n\n      this.products.find(p => p.id == product.id).qty = 0;\n      this.products.find(p => p.id == product.id).stock = 10; //Update cart total to reflect change\n\n      this.getCartTotalQty();\n      this.getCartTotal(); // window.alert('Removed from cart');\n\n      this._snackbar.open(`Removed all of the ${product.name} from cart`, 'x');\n    }\n\n    getCartItems() {\n      this.getCartTotalQty();\n      return this.cartItems;\n    }\n\n    getCartTotal() {\n      let total = 0;\n\n      for (const product of this.cartItems) {\n        total += product.qty * product.price;\n      }\n\n      this.getCartTotalQty();\n      return total;\n    }\n\n    clearCart() {\n      this.cartItems = [];\n      this.getCartTotalQty();\n      this.products.map(p => p.qty = 0);\n    }\n\n    setOrderDetails(customer, cartTotal) {\n      this.orderDetails = {\n        name: customer.name,\n        total: cartTotal\n      };\n    }\n\n    getOrderDetails() {\n      console.log(this.orderDetails);\n      return this.orderDetails;\n    } //Get total item quantity in cart to reflect on the badge\n\n\n    getCartTotalQty() {\n      let qty = 0;\n\n      for (const p of this.cartItems) {\n        qty += p.qty;\n      }\n\n      this.cartItemsCount$.next(qty);\n    }\n\n  }\n\n  CartService.ɵfac = function CartService_Factory(t) {\n    return new (t || CartService)(i0.ɵɵinject(i1.InventoryService), i0.ɵɵinject(i2.MatSnackBar));\n  };\n\n  CartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartService,\n    factory: CartService.ɵfac\n  });\n  return CartService;\n})();","map":null,"metadata":{},"sourceType":"module"}